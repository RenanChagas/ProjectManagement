package br.com.management.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;


import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import br.com.management.model.User;
import br.com.management.service.UserProfileService;
import br.com.management.service.UserService;

@Controller
public class ProfileController {
	
	@Autowired
	UserProfileService userProfileService;
	
	@Autowired
	UserService userService;
	
	@Autowired
	ServletContext context;
	
	@ModelAttribute("user")
	public User getUserName() {
		return userService.findByUsername(getPrincipal());
	}	
	
	@RequestMapping(value = "/profile", method = RequestMethod.GET)
	public String profile(ModelMap model) {
		
		return "profile";
	}
	
	@RequestMapping(value = "/profile", method = RequestMethod.POST)
	public String profileEdit(User user, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			System.out.println("There are errors");
			return "welcome";
		}
		userService.update(user);
		
		return "profile";
	}
	
	@RequestMapping(value = "/uploadFile", method = RequestMethod.POST)
	public String uploadFileHandler(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
		
		if (!file.isEmpty()) {
			try {
				byte[] bytes = file.getBytes();

				// Creating the directory to store file
				String rootPath = System.getProperty("catalina.home");
				String filepath = context.getRealPath("");
				filepath = filepath + "static/images/avatar";
				
				File dir = new File(filepath + File.separator +  getUserName().getUsername());
				if (!dir.exists())
					dir.mkdirs();

				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath()
						+ File.separator + getUserName().getUsername() + ".png");
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();

				System.out.println("Server File Location="
						+ serverFile.getAbsolutePath());
				
				return "redirect:/profile";
			} catch (Exception e) {
				System.out.println("You failed to upload " + getUserName().getUsername() + " => " + e.getMessage());
				
				return "redirect:/profile";
			}
		} else {
			System.out.println("You failed to upload " + getUserName().getUsername());
			return "redirect:/profile";
		}
	}
	
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	
	
	private String getPrincipal(){
		String userName = null;
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof UserDetails) {
			userName = ((UserDetails)principal).getUsername();
		} else {
			userName = principal.toString();
		}
		return userName;
	}

}

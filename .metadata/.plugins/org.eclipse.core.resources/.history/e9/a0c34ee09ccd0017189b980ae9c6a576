package br.com.management.controller;

import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import br.com.management.model.Task;
import br.com.management.model.User;
import br.com.management.model.UserProfile;
import br.com.management.service.TaskService;
import br.com.management.service.UserProfileService;
import br.com.management.service.UserService;

@Controller
public class AccessController {
	
	@Autowired
	UserProfileService userProfileService;
	
	@Autowired
	UserService userService;
	
	@Autowired
	TaskService taskService;
	
	@ModelAttribute("roles")
	public List<UserProfile> initializeProfiles() {
		return userProfileService.findAll();
	}
	
	@ModelAttribute("user")
	public User getUserName() {
		return userService.findByUsername(getPrincipal());
	}
	
	@RequestMapping(value = { "/","/home", "/dashboard" })
	public String homePage(ModelMap model) {
		
		List<Task> allTasks =  taskService.findAllByUser(userService.findByUsername(getPrincipal()));
		
		//Get List of last 5 months
		YearMonth month = YearMonth.now();
		List<String> months = new ArrayList<String>();
		DateTimeFormatter monthFormatter = DateTimeFormatter.ofPattern("MMMM");
		
		months.add(month.format(monthFormatter));
		for (int i=1; i<=5; i++){
			months.add(month.minusMonths(i).format(monthFormatter));
		}
		
		int completedTasks = 0;
		int pendingTasks = 0;
		int failedTasks = 0;
		for(Task task : allTasks){
			if (task.getState() == 2){
				completedTasks++;
			}
			if (task.getState() == 1){
				pendingTasks++;
			}
			if (task.getState() == 4){
				failedTasks++;
			}
		}
		
		double percCompleted = (completedTasks * 100) / allTasks.size();
		double percPending = (pendingTasks * 100) / allTasks.size();
		double percFailed = (failedTasks * 100) / allTasks.size();
		
		List<Task> pendingTaskList = new ArrayList<Task>();
		List<Task> failedTaskList = new ArrayList<Task>();
		List<Task> completedTaskList = new ArrayList<Task>();
		
		for(Task task : allTasks){
			if (task.getState() == 1){
				pendingTaskList.add(task);
			}
			if (task.getState() == 2){
				completedTaskList.add(task);
			}
			if (task.getState() == 4){
				failedTaskList.add(task);
			}
		}
		
		
		int contPendingTaskMes0 = 0;
		int contPendingTaskMes1 = 0;
		int contPendingTaskMes2 = 0;
		int contPendingTaskMes3 = 0;
		int contPendingTaskMes4 = 0;
		
		int contFailedTaskMes0 = 0;
		int contFailedTaskMes1 = 0;
		int contFailedTaskMes2 = 0;
		int contFailedTaskMes3 = 0;
		int contFailedTaskMes4 = 0;
		
		int contCompletedTaskMes0 = 0;
		int contCompletedTaskMes1 = 0;
		int contCompletedTaskMes2 = 0;
		int contCompletedTaskMes3 = 0;
		int contCompletedTaskMes4 = 0;
		
		//GET Number of pending task on the last 5 months
		for(Task task : pendingTaskList){
			int i = 1 + task.getCreateDate().getMonth();
			if (i == month.getMonthValue()){
				contPendingTaskMes0 += 1;
			}
			if (i == month.minusMonths(1).getMonthValue()){
				contPendingTaskMes1 += 1;
			}
			if (i == month.minusMonths(2).getMonthValue()){
				contPendingTaskMes2 += 1;
			}
			if (i == month.minusMonths(3).getMonthValue()){
				contPendingTaskMes3 += 1;
			}
			if (i == month.minusMonths(4).getMonthValue()){
				contPendingTaskMes4 += 1;
			}
		}
		
		//GET Number of completed task on the last 5 months
		for(Task task : completedTaskList){
			int i = 1 + task.getCreateDate().getMonth();
			if (i == month.getMonthValue()){
				contCompletedTaskMes0 += 1;
			}
			if (i == month.minusMonths(1).getMonthValue()){
				contCompletedTaskMes1 += 1;
			}
			if (i == month.minusMonths(2).getMonthValue()){
				contCompletedTaskMes2 += 1;
			}
			if (i == month.minusMonths(3).getMonthValue()){
				contCompletedTaskMes3 += 1;
			}
			if (i == month.minusMonths(4).getMonthValue()){
				contCompletedTaskMes4 += 1;
			}
		}
		
		//GET Number of failed task on the last 5 months
				for(Task task : completedTaskList){
					int i = 1 + task.getCreateDate().getMonth();
					if (i == month.getMonthValue()){
						contCompletedTaskMes0 += 1;
					}
					if (i == month.minusMonths(1).getMonthValue()){
						contCompletedTaskMes1 += 1;
					}
					if (i == month.minusMonths(2).getMonthValue()){
						contCompletedTaskMes2 += 1;
					}
					if (i == month.minusMonths(3).getMonthValue()){
						contCompletedTaskMes3 += 1;
					}
					if (i == month.minusMonths(4).getMonthValue()){
						contCompletedTaskMes4 += 1;
					}
				}
		
		List<Integer> contPendingTask = new ArrayList<Integer>();
		contPendingTask.add(0, contPendingTaskMes0);
		contPendingTask.add(1, contPendingTaskMes1);
		contPendingTask.add(2, contPendingTaskMes2);
		contPendingTask.add(3, contPendingTaskMes3);
		contPendingTask.add(4, contPendingTaskMes4);
	

		
		model.addAttribute("pendingTasksNumber", contPendingTask);
		model.addAttribute("months", months);

		
		model.addAttribute("percCompletedTasks", percCompleted);
		model.addAttribute("percPendingTasks", percPending);
		model.addAttribute("percFailedTasks", percFailed);
		
		model.addAttribute("failedTasks", failedTasks);
		model.addAttribute("pendingTasks", pendingTasks);
		model.addAttribute("completedTasks", completedTasks);
		model.addAttribute("allTasks", allTasks.size());
		return "dashboard";
	}
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String loginPage() {
		return "login";
	}
	
	@RequestMapping(value="/logout", method = RequestMethod.GET)
	public String logout (HttpServletRequest request, HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null){    
			new SecurityContextLogoutHandler().logout(request, response, auth);
		}
		return "redirect:/login?logout";
	}
	
	@RequestMapping(value = "/accessDenied", method = RequestMethod.GET)
	public String accessDenied(ModelMap model) {
		return "accessDenied";
	}

	
	private String getPrincipal(){
		String userName = null;
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof UserDetails) {
			userName = ((UserDetails)principal).getUsername();
		} else {
			userName = principal.toString();
		}
		return userName;
	}
	
}
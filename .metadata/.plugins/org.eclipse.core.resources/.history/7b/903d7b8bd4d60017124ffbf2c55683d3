package br.com.management.controller;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import br.com.management.model.Project;
import br.com.management.model.Search;
import br.com.management.model.User;
import br.com.management.service.ProjectService;
import br.com.management.service.UserService;

@Controller
public class ProjectController {
	
	@Autowired
	ServletContext context;
	
	@Autowired
	UserService userService;
	
	@Autowired
	ProjectService projectService;
	
	@ModelAttribute("user")
	public User getUserName() {
		return userService.findByUsername(getPrincipal());
	}
	
	@ModelAttribute("search")
	public Search pesquisar(){
		Search search = new Search();
		return search;
	}
	
	@RequestMapping("/projects")
	public String list(Model model){
		
		model.addAttribute("currentSorting", "Latest");
		model.addAttribute("project", projectService.findByFilter("Latest"));
		return "projects";
	}
	
	//FILTER
	@RequestMapping(value= "/projects/filter/{sortingType}", method = RequestMethod.GET)
	public String sortNotification(ModelMap model, @PathVariable String sortingType){
		
		model.addAttribute("currentSorting", sortingType);
		model.addAttribute("project", projectService.findByFilter(sortingType));
		return "projects";
	}
	
	@RequestMapping(value = "/projects/create", method = RequestMethod.GET)
	public String newProject(ModelMap model) {
		
		Project project = new Project();
		model.addAttribute("project", project);
		return "projectCreate";
	}
	
	@RequestMapping(value = "/projects/create", method = RequestMethod.POST)
	public String newProject(Project project, @RequestParam("file") MultipartFile file,
			BindingResult result, ModelMap model) {
		
		
		
		if (project.getCreateUser() == null){
			Date date = new Date();
			project.setCreateDate(date);
			project.setCreateUser(getPrincipal());
		}
		
		System.out.println(project.toString());
		
		if (result.hasErrors()) {
			System.out.println("There are errors");
			return "redirect:/projects/create";
		}
		projectService.save(project);
		System.out.println("VERIFICAR SE RETORNO O ID CORRETO" + project.getId());
		
		
		if (!file.isEmpty()) {
			try {
				byte[] bytes = file.getBytes();
				System.out.println("File exists");
				
				// Creating the directory to store file
				String rootPath = System.getProperty("catalina.home");
				String filepath = context.getRealPath("");
				filepath = filepath + "static/projects";
				
				File dir = new File(filepath + File.separator +  getUserName().getUsername());
				if (!dir.exists())
					dir.mkdirs();
			
			} catch (Exception e) {
				System.out.println("You failed to upload " + getUserName().getUsername() + " => " + e.getMessage());
			}
		}

		return "redirect:/projects";
	}
	
	@RequestMapping(value = "/projects/details", method = RequestMethod.GET)
	public String updateProject(@RequestParam("id") int projectId, Model model){
		
		Project project = projectService.findById(projectId);
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		Date date = project.getDueDate();
		dateFormat.format(date);
		project.setDueDate(date);
		System.out.println(project);
		
		model.addAttribute("project", projectService.findById(projectId));
		System.out.println(projectService.findById(projectId));
		return "projectDetail";
	}
	
	@RequestMapping(value = "/projects/details", method = RequestMethod.POST)
	public String updateProject(Project project,
			BindingResult result, ModelMap model) {
		
		System.out.println(project.toString());
		
		if (project.getFinishState() != 1){
			Date date = new Date();
			project.setFinishDate(date);
			project.setFinishUser(getPrincipal());
		}
		
		if (result.hasErrors()) {
			System.out.println("There are errors");
			return "redirect:/projects";
		}
		projectService.update(project);

		return "redirect:/projects";
	}
	
	@RequestMapping(value = "/deleteProject")
	public String deleteProject(@Valid Project project,
			BindingResult result, ModelMap model){
			
		Project deleteProject = new Project();
		deleteProject = projectService.findById(project.getId());
		System.out.println("Projeto: " +deleteProject);
		projectService.deleteById(deleteProject.getId());
		
		return "redirect:/projects";
	}
	
	private String getPrincipal(){
		String userName = null;
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof UserDetails) {
			userName = ((UserDetails)principal).getUsername();
		} else {
			userName = principal.toString();
		}
		return userName;
	}

}

package br.com.management.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletContext;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import br.com.management.model.FilesModel;
import br.com.management.model.Project;
import br.com.management.model.Search;
import br.com.management.model.Task;
import br.com.management.model.User;
import br.com.management.model.TaskType;
import br.com.management.service.ProjectService;
import br.com.management.service.TaskService;
import br.com.management.service.UserService;

@Controller
public class TaskController {
	
	@Autowired
	ServletContext context;
	
	@Autowired
	UserService userService;
	
	@Autowired
	ProjectService projectService;
	
	@Autowired
	TaskService taskService;
	
	@ModelAttribute("userLogin")
	public User getUserName() {
		return userService.findByUsername(getPrincipal());
	}
	
	
	@ModelAttribute("allUsers")
	public List<User> getAllUsers() {
		return userService.findAllByOrderByIdAsc();
	}
	
	@ModelAttribute("search")
	public Search pesquisar(){
		Search search = new Search();
		return search;
	}
	
	@RequestMapping(value = "/projects/tasks", method = RequestMethod.GET)
	public String list(@RequestParam("id") int projectId, Model model){
		Project project = projectService.findById(projectId);
		
		model.addAttribute("currentSorting", "Latest");
		model.addAttribute("task", taskService.findProjectTasksByFilter("Latest", projectId));
		model.addAttribute("project", project);
		return "tasks";
	}
	
	//FILTER
	@RequestMapping(value= "/projects/tasks/filter/{sortingType}", method = RequestMethod.GET)
	public String sortTask(@RequestParam("id") int projectId, Model model, 
			@PathVariable String sortingType){
		
		Project project = projectService.findById(projectId);
			
		model.addAttribute("currentSorting", sortingType);
		model.addAttribute("task", taskService.findProjectTasksByFilter(sortingType, projectId));
		model.addAttribute("project", project);
		return "tasks";
	}
	
	
	@RequestMapping(value = "/task/myTasks", method = RequestMethod.GET)
	public String myTask(Model model){
		model.addAttribute("currentSorting", "Latest");
		model.addAttribute("task", taskService.findMyTaskByFilter("Latest", getUserName()));
		return "myTasks";
	}
	
	//FILTER MY TASKS
	@RequestMapping(value= "/task/filter/{sortingType}", method = RequestMethod.GET)
	public String sortMyTasks(ModelMap model, @PathVariable String sortingType){
		
		model.addAttribute("currentSorting", sortingType);
		model.addAttribute("task", taskService.findMyTaskByFilter(sortingType, getUserName()));
		return "myTasks";
	}
	
	
	@RequestMapping(value = "/task/create", method = RequestMethod.GET)
	public String newTask(@RequestParam("id") int projectId, @RequestParam("taskType") int taskType, ModelMap model) {
		Project project = projectService.findById(projectId);
		Task task = new Task();
		
		int userId = 0;
		
		model.addAttribute("task", task);
		model.addAttribute("project", project);
		model.addAttribute("userId", userId);
		return "taskCreate";
	}
	
	@RequestMapping(value = "/task/create", method = RequestMethod.POST)
	public String newTask(@RequestParam("id") int projectId, @RequestParam("taskType") int taskType, 
			@RequestParam("file") MultipartFile file, ModelMap model, Task task,
			BindingResult result, RedirectAttributes ra, @ModelAttribute("userId") int userId) {
		
		TaskType taskType2 = new TaskType();
		taskType2.setId(taskType);
		task.setTaskType(taskType2);
		
		//SETANDO O USUARIO DA TASK
		User userTask = userService.findById(userId);
		task.setUser(userTask);
		
		if (task.getCreateUser() == null){
			Date date = new Date();
			task.setCreateDate(date);
			task.setCreateUser(getPrincipal());
		}
		
		System.out.println("Verificando objeto Usuario" + task);
		
		Project project = projectService.findById(projectId);
		task.setProject(project);
		
		taskService.save(task);
		
		Task lastTask = taskService.findFirstByOrderByIdDesc();
		
		System.out.println("Verificando o id da tarefa" + lastTask.getId());
		
		if (!file.isEmpty()) {
			try {
				byte[] bytes = file.getBytes();
				System.out.println("File exists");
				
				// Creating the directory to store file
				String rootPath = System.getProperty("catalina.home");
				String filepath = context.getRealPath("");
				filepath = filepath + "static/tasks";
				
				File dir = new File(filepath + File.separator +  lastTask.getId());
				if (!dir.exists())
					dir.mkdirs();
				
				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath()
						+ File.separator +file.getOriginalFilename());
				
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();
				
				System.out.println("Server File Location="
						+ serverFile.getAbsolutePath());
			
			} catch (Exception e) {
				System.out.println("You failed to upload " + getUserName().getUsername() + " => " + e.getMessage());
			}
		}
		
		ra.addAttribute("id", projectId);
		return "redirect:/projects/tasks";
	}
	
	@RequestMapping(value = "/task/details", method = RequestMethod.GET)
	public String updateProject(@RequestParam("id") int taskId, Model model, @RequestParam("projectId") int projectId){
		
		int userId = 0;
		
		System.out.println("TESTE DE ENTRAR");
		
		Project project = projectService.findById(projectId);
		Task task = taskService.findById(taskId);
		
		model.addAttribute("project", project);
		model.addAttribute("task", task);
		model.addAttribute("userId", userId);
		
		String rootPath = System.getProperty("catalina.home");
		String filepath = context.getRealPath("");
		filepath = filepath + "static/tasks";
		
		File dir = new File(filepath + File.separator +  task.getId());
		if (dir.exists()){
			
		}
		
		
		
		//RETRIEVE ALL THE FILES
		
		
		filepath = filepath + "static/tasks";
		File dir = new File(filepath + File.separator +  task.getId());
		
		// Creating the directory to store file
		String rootPath = System.getProperty("catalina.home");
		String filepath = context.getRealPath("");
		filepath = filepath + "static/tasks";
				
		System.out.println("TESTE DE ENTRAR 2");
		
		File folder = new File(dir.getAbsolutePath());
		
		System.out.println("TESTE DE ENTRAR 2" + folder.listFiles().length);
		
		if (folder.listFiles().length != 0){
			
		}
		
		File[] listOfFiles = folder.listFiles();
				
		List<FilesModel> files = new ArrayList<FilesModel>();
		
		System.out.println("teste listoffiles" + listOfFiles.length);
				
		if (listOfFiles.length != 0){
			for (int i = 0; i < listOfFiles.length; i++) {
				if (listOfFiles[i].isFile()) {
					System.out.println("File " + listOfFiles[i].getName());
				    FilesModel filesModel = new FilesModel();
				    filesModel.setLocation(dir.getAbsolutePath() +  File.separator + listOfFiles[i].getName());
				    filesModel.setName(listOfFiles[i].getName());
				        
				    files.add(filesModel);
				        
				    } else if (listOfFiles[i].isDirectory()) {
				    	System.out.println("Directory " + listOfFiles[i].getName());
				    }
			}
		}

			
				
		System.out.println("LINKS" + files.toString());
		model.addAttribute("FilesProject", files);
		
		return "taskDetail";
	}
	
	@RequestMapping(value = "/task/details", method = RequestMethod.POST)
	public String updateProject(@RequestParam("file") MultipartFile file, Model model,@ModelAttribute("task") Task task, BindingResult result, 
			RedirectAttributes ra, @ModelAttribute("userId") int userId) {
		
		System.out.println("TESTE 1" + task);
		
		//SETANDO O USUARIO DA TASK
		User userTask = userService.findById(userId);
		task.setUser(userTask);
		
		if (task.getState() != 1){
			Date date = new Date();
			task.setFinishDate(date);
			task.setFinishUser(getPrincipal());
		}

		System.out.println("TESTANDO CREATE DATE" +task);
		
		Task search = taskService.findById(task.getId());
		taskService.update(task);
		
		
		if (!file.isEmpty()) {
			try {
				byte[] bytes = file.getBytes();
				System.out.println("File exists");
				
				// Creating the directory to store file
				String rootPath = System.getProperty("catalina.home");
				String filepath = context.getRealPath("");
				filepath = filepath + "static/tasks";
				
				File dir = new File(filepath + File.separator +  task.getId());
				if (!dir.exists())
					dir.mkdirs();
				
				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath()
						+ File.separator +file.getOriginalFilename());
				
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();
				
				System.out.println("Server File Location="
						+ serverFile.getAbsolutePath());
				
			
			} catch (Exception e) {
				System.out.println("You failed to upload " + getUserName().getUsername() + " => " + e.getMessage());
			}
		}
		
		
		
		ra.addAttribute("id", search.getProject().getId());
		return "redirect:/projects/tasks?";
	}
	
	@RequestMapping(value = "/deleteTask")
	public String deleteTask(@Valid Task task,
			BindingResult result, ModelMap model, RedirectAttributes atributes){
		
		Task deleteTask = new Task();
		deleteTask = taskService.findById(task.getId());
		
		
		atributes.addAttribute("id", deleteTask.getProject().getId());
		System.out.println("Task Deletado: " +deleteTask.toString());
		taskService.deleteById(deleteTask.getId());
		
		return "redirect:/projects/tasks?";
	}
	
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public String search(ModelMap model, @RequestParam("string") String search) {
		
		search = search.replaceAll(",", "");
		System.out.println("search:" + search);
		model.addAttribute("task", taskService.findByNameContaining(search));
		model.addAttribute("searchValue", search);
		return "search";
	}
	
	private String getPrincipal(){
		String userName = null;
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof UserDetails) {
			userName = ((UserDetails)principal).getUsername();
		} else {
			userName = principal.toString();
		}
		return userName;
	}

}
